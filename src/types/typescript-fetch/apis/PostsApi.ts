/* tslint:disable */
/* eslint-disable */
/**
 * しずかなインターネット API
 * - このAPIは自分の記事データを取得するために利用します。他のユーザーのデータを取得することはできません。 - APIは[プロジェクトのスポンサー](https://sizu.me/sponsors/purchase)のみが利用できます。 - 認証やレート制限などについては[GitHubリポジトリ](https://github.com/catnose99/quiet-internet-api-docs)を参照してください。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1PostsGet200Response,
  ApiV1PostsSlugGet200Response,
} from '../models/index';
import {
    ApiV1PostsGet200ResponseFromJSON,
    ApiV1PostsGet200ResponseToJSON,
    ApiV1PostsSlugGet200ResponseFromJSON,
    ApiV1PostsSlugGet200ResponseToJSON,
} from '../models/index';

export interface ApiV1PostsGetRequest {
    page?: number;
    perPage?: number;
    sort?: ApiV1PostsGetSortEnum;
    direction?: ApiV1PostsGetDirectionEnum;
    visibility?: ApiV1PostsGetVisibilityEnum;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
}

export interface ApiV1PostsSlugGetRequest {
    slug: string;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * - 自分の記事一覧を取得するためのエンドポイントです。
     * 記事の一覧を取得する
     */
    async apiV1PostsGetRaw(requestParameters: ApiV1PostsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1PostsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.visibility !== undefined) {
            queryParameters['visibility'] = requestParameters.visibility;
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['createdAfter'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['createdBefore'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.updatedAfter !== undefined) {
            queryParameters['updatedAfter'] = (requestParameters.updatedAfter as any).toISOString();
        }

        if (requestParameters.updatedBefore !== undefined) {
            queryParameters['updatedBefore'] = (requestParameters.updatedBefore as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1PostsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * - 自分の記事一覧を取得するためのエンドポイントです。
     * 記事の一覧を取得する
     */
    async apiV1PostsGet(requestParameters: ApiV1PostsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1PostsGet200Response> {
        const response = await this.apiV1PostsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定されたslugの記事の詳細情報を取得するためのエンドポイントです。
     * 記事の詳細情報を取得する
     */
    async apiV1PostsSlugGetRaw(requestParameters: ApiV1PostsSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1PostsSlugGet200Response>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling apiV1PostsSlugGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/posts/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1PostsSlugGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 指定されたslugの記事の詳細情報を取得するためのエンドポイントです。
     * 記事の詳細情報を取得する
     */
    async apiV1PostsSlugGet(requestParameters: ApiV1PostsSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1PostsSlugGet200Response> {
        const response = await this.apiV1PostsSlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1PostsGetSortEnum = {
    Created: 'created',
    Updated: 'updated'
} as const;
export type ApiV1PostsGetSortEnum = typeof ApiV1PostsGetSortEnum[keyof typeof ApiV1PostsGetSortEnum];
/**
 * @export
 */
export const ApiV1PostsGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ApiV1PostsGetDirectionEnum = typeof ApiV1PostsGetDirectionEnum[keyof typeof ApiV1PostsGetDirectionEnum];
/**
 * @export
 */
export const ApiV1PostsGetVisibilityEnum = {
    Myself: 'MYSELF',
    Anyone: 'ANYONE'
} as const;
export type ApiV1PostsGetVisibilityEnum = typeof ApiV1PostsGetVisibilityEnum[keyof typeof ApiV1PostsGetVisibilityEnum];
